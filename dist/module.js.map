{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///./module.ts","webpack:///./SeriesWrapper.ts","webpack:///./editor.ts","webpack:///./libLoader.ts","webpack:///../node_modules/scriptjs/dist/script.js","webpack:///./anno.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","__WEBPACK_EXTERNAL_MODULE__0__","_sdk","_SeriesWrapper","_editor","_libLoader","_anno","a","Plotly","PlotlyPanelCtrl","_super","$scope","$injector","$window","$rootScope","uiSegmentSrv","annotationsSrv","_this","this","seriesByKey","Map","seriesHash","doResize","_lodash2","debounce","window","getComputedStyle","graphDiv","display","rect","getBoundingClientRect","layout","width","height","redraw","console","warn","deepCopyWithTemplates","obj","isArray","map","val","isString","templateSrv","replace","panel","scopedVars","isObject","copy_1","forEach","v","k","initialized","defaultsDeep","defaults","cfg","pconfig","traces","events","loadPlotly","then","log","on","onRender","onDataReceived","onDataError","onResize","onDataSnapshotLoad","onRefresh","refresh","onInitEditMode","__extends","$inject","getCssRule","selectorText","styleSheets","document","idx","length","rules","cssRules","ruleIdx","rule","err","series","annotations","render","otherPanelInFullscreenMode","editor","EditorHelper","addEditorTab","onConfigChanged","setTimeout","processConfigMigration","configVersion","plot_bgcolor","paper_bgcolor","autosize","margin","scene","is3d","zaxis","settings","old","show_1","markers","indexOf","lines","trace","show","version","onPanelInitialized","_updateTraceData","getProcessedLayout","xaxis","yaxis","title","b","pad","isDate","type","labelStyle","color","style","font","_jquery2","parse","scale","toString","gridcolor","options","showLink","displaylogo","displayModeBar","modeBarButtonsToRemove","shapes","react","data","points","pointNumber","ts","msg","x","toPrecision","y","appEvent","dashboard","formatDate","_moment2","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","Math","range","from","utc","to","timeSrv","setTime","Plots","purge","innerHTML","snapshot","dataList","finfo","useRefID_1","targets","sidx","refId","String","fromCharCode","charCodeAt","columns","push","SeriesWrapperTable","SeriesWrapperTableRow","target","SeriesWrapperSeries","error","clear","getAllKeys","set","hchanged","updateMappings","selectTrace","traceIndex","getAnnotations","results","processAnnotations","__addCopyPath","path","__set","dataWarnings","_updateTracesFromConfigs","cloneDeep","defaultTrace","is3D","tconfig","config","mapping","createTraceName","marker","sizemin","sizemode","sizeref","color_option","colorscale","showscale","line","text","z","substring","force","zero","vals","toArray","Array","loadIfNecessary","res","link","scope","elem","attrs","ctrl","find","evt","mouse","templateUrl","loadFromCDN","size","dash","shape","symbol","showlegend","legend","orientation","dragmode","hovermode","family","showgrid","zeroline","rangemode","MetricsPanelCtrl","SeriesWrapper","setFirst","first","isNumber","_typeof","getKey","count","datapoints","arr","table","rows","index","col","Error","row","_module","REMOVE_KEY","axis","defaultMappings","time","changed","onUpdateAxis","label","segment","deepClone","newSegment","updateSegMapping","updateTrace","fake","opts","html","createTrace","removeCurrentTrace","splice","getSeriesSegs","withRemove","Promise","resolve","reject","onAxisSeriesChanged","getTextSegments","onTextMetricChanged","sss","seg","getColorSegments","onColorChanged","onSymbolChanged","getSymbolSegs","segs","loaded","wasCDN","isFull","_scriptjs2","needsFull","url","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","scriptpath","urlArgs","doc","head","getElementsByTagName","f","readyState","onreadystatechange","ids","delay","scripts","every","ar","fn","j","el","$script","paths","idOrDone","optDone","idOrDoneIsDone","done","id","join","queue","loopFn","item","list","callback","dset","split","each","test","loading","h","createElement","onload","onerror","async","src","insertBefore","lastChild","shift","str","ready","deps","req","missing","dep","xref","yref","x0","y0","x1","y1","visible","layer","fillcolor","annotation","iconColor","opacity"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/* -*- Mode: typescript; indent-tabs-mode: nil; typescript-indent-level: 2 -*- */\n\n///<reference path=\"../node_modules/grafana-sdk-mocks/app/headers/common.d.ts\" />\n\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nimport _ from 'lodash';\nimport moment from 'moment';\nimport $ from 'jquery';\n\nimport {\n  SeriesWrapper,\n  SeriesWrapperSeries,\n  SeriesWrapperTable,\n  SeriesWrapperTableRow,\n} from './SeriesWrapper';\nimport {EditorHelper} from './editor';\n\nimport {loadPlotly, loadIfNecessary} from './libLoader';\nimport {processAnnotations} from './anno';\nimport {Shape} from 'plotly.js';\n\nlet Plotly: any; // Loaded dynamically!\n\nclass PlotlyPanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'partials/module.html';\n  static configVersion = 1; // An index to help config migration\n\n  initialized: boolean;\n  //$tooltip: any;\n\n  static defaultTrace = {\n    mapping: {\n      x: null,\n      y: null,\n      z: null,\n      text: null,\n      color: null,\n      size: null,\n    },\n    show: {\n      line: true,\n      markers: true,\n    },\n    settings: {\n      line: {\n        color: '#005f81',\n        width: 6,\n        dash: 'solid',\n        shape: 'linear',\n      },\n      marker: {\n        size: 15,\n        symbol: 'circle',\n        color: '#33B5E5',\n        colorscale: 'YlOrRd',\n        sizemode: 'diameter',\n        sizemin: 3,\n        sizeref: 0.2,\n        line: {\n          color: '#DDD',\n          width: 0,\n        },\n        showscale: false,\n      },\n      color_option: 'ramp',\n    },\n  };\n  static defaults = {\n    pconfig: {\n      loadFromCDN: false,\n      traces: [PlotlyPanelCtrl.defaultTrace],\n      settings: {\n        type: 'scatter',\n        displayModeBar: false,\n      },\n      layout: {\n        showlegend: false,\n        legend: {\n          orientation: 'h',\n        },\n        dragmode: 'lasso', // (enumerated: \"zoom\" | \"pan\" | \"select\" | \"lasso\" | \"orbit\" | \"turntable\" )\n        hovermode: 'closest',\n        font: {\n          family: '\"Open Sans\", Helvetica, Arial, sans-serif',\n        },\n        xaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'auto',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n        yaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" ),\n        },\n        zaxis: {\n          showgrid: true,\n          zeroline: false,\n          type: 'linear',\n          rangemode: 'normal', // (enumerated: \"normal\" | \"tozero\" | \"nonnegative\" )\n        },\n      },\n    },\n  };\n\n  graphDiv: any;\n  annotations: Shape[];\n  series: SeriesWrapper[];\n  seriesByKey: Map<string, SeriesWrapper> = new Map();\n  seriesHash = '?';\n\n  traces: any[]; // The data sent directly to Plotly -- with a special __copy element\n  layout: any; // The layout used by Plotly\n\n  mouse: any;\n  cfg: any;\n\n  // For editor\n  editor: EditorHelper;\n  dataWarnings: string[]; // warnings about loading data\n\n  /** @ngInject **/\n  constructor(\n    $scope,\n    $injector,\n    $window,\n    private $rootScope,\n    public uiSegmentSrv,\n    private annotationsSrv\n  ) {\n    super($scope, $injector);\n\n    this.initialized = false;\n\n    //this.$tooltip = $('<div id=\"tooltip\" class=\"graph-tooltip\">');\n\n    // defaults configs\n    _.defaultsDeep(this.panel, PlotlyPanelCtrl.defaults);\n\n    this.cfg = this.panel.pconfig;\n\n    this.traces = [];\n\n    // ?? This seems needed for tests?!!\n    if (!this.events) {\n      return;\n    }\n\n    loadPlotly(this.cfg).then(v => {\n      Plotly = v;\n      console.log('Plotly', v);\n\n      // Wait till plotly exists has loaded before we handle any data\n      this.events.on('render', this.onRender.bind(this));\n      this.events.on('data-received', this.onDataReceived.bind(this));\n      this.events.on('data-error', this.onDataError.bind(this));\n      this.events.on('panel-size-changed', this.onResize.bind(this));\n      this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n      this.events.on('refresh', this.onRefresh.bind(this));\n\n      // Refresh after plotly is loaded\n      this.refresh();\n    });\n\n    // Standard handlers\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-initialized', this.onPanelInitialized.bind(this));\n  }\n\n  getCssRule(selectorText): CSSStyleRule | null {\n    const styleSheets = document.styleSheets;\n    for (let idx = 0; idx < styleSheets.length; idx += 1) {\n      const styleSheet = styleSheets[idx] as CSSStyleSheet;\n      const rules = styleSheet.cssRules;\n      for (let ruleIdx = 0; ruleIdx < rules.length; ruleIdx += 1) {\n        const rule = rules[ruleIdx] as CSSStyleRule;\n        if (rule.selectorText === selectorText) {\n          return rule;\n        }\n      }\n    }\n    return null;\n  }\n\n  // Don't call resize too quickly\n  doResize = _.debounce(() => {\n    // https://github.com/alonho/angular-plotly/issues/26\n    const e = window.getComputedStyle(this.graphDiv).display;\n    if (!e || 'none' === e) {\n      // not drawn!\n      console.warn('resize a plot that is not drawn yet');\n    } else {\n      const rect = this.graphDiv.getBoundingClientRect();\n      this.layout.width = rect.width;\n      this.layout.height = this.height;\n      Plotly.redraw(this.graphDiv);\n    }\n  }, 50);\n\n  onResize() {\n    if (this.graphDiv && this.layout && Plotly) {\n      this.doResize(); // Debounced\n    }\n  }\n\n  onDataError(err) {\n    this.series = [];\n    this.annotations = [];\n    this.render();\n  }\n\n  onRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    if (this.graphDiv && this.initialized && Plotly) {\n      Plotly.redraw(this.graphDiv);\n    }\n  }\n\n  onInitEditMode() {\n    this.editor = new EditorHelper(this);\n    this.addEditorTab('Display', 'public/plugins/natel-plotly-panel/partials/tab_display.html', 2);\n    this.addEditorTab('Traces', 'public/plugins/natel-plotly-panel/partials/tab_traces.html', 3);\n    //  this.editorTabIndex = 1;\n    this.onConfigChanged(); // Sets up the axis info\n\n    // Check the size in a little bit\n    setTimeout(() => {\n      console.log('RESIZE in editor');\n      this.onResize();\n    }, 500);\n  }\n\n  processConfigMigration() {\n    console.log('Migrating Plotly Configuration to version: ' + PlotlyPanelCtrl.configVersion);\n\n    // Remove some things that should not be saved\n    const cfg = this.panel.pconfig;\n    delete cfg.layout.plot_bgcolor;\n    delete cfg.layout.paper_bgcolor;\n    delete cfg.layout.autosize;\n    delete cfg.layout.height;\n    delete cfg.layout.width;\n    delete cfg.layout.margin;\n    delete cfg.layout.scene;\n    if (!this.is3d()) {\n      delete cfg.layout.zaxis;\n    }\n\n    // Move from 'markers-lines' to checkbox\n    if (cfg.settings.mode) {\n      const old = cfg.settings.mode;\n      const show = {\n        markers: old.indexOf('markers') >= 0,\n        lines: old.indexOf('lines') >= 0,\n      };\n      _.forEach(cfg.traces, trace => {\n        trace.show = show;\n      });\n      delete cfg.settings.mode;\n    }\n\n    // TODO... MORE Migrations\n    console.log('After Migration:', cfg);\n    this.cfg = cfg;\n    this.panel.version = PlotlyPanelCtrl.configVersion;\n  }\n\n  onPanelInitialized() {\n    if (!this.panel.version || PlotlyPanelCtrl.configVersion > this.panel.version) {\n      this.processConfigMigration();\n    }\n    this._updateTraceData(true);\n  }\n\n  deepCopyWithTemplates = obj => {\n    if (_.isArray(obj)) {\n      return obj.map(val => this.deepCopyWithTemplates(val));\n    } else if (_.isString(obj)) {\n      return this.templateSrv.replace(obj, this.panel.scopedVars);\n    } else if (_.isObject(obj)) {\n      const copy = {};\n      _.forEach(obj, (v, k) => {\n        copy[k] = this.deepCopyWithTemplates(v);\n      });\n      return copy;\n    }\n    return obj;\n  };\n\n  getProcessedLayout() {\n    // Copy from config\n    const layout = this.deepCopyWithTemplates(this.cfg.layout);\n    layout.plot_bgcolor = 'transparent';\n    layout.paper_bgcolor = layout.plot_bgcolor;\n\n    // Update the size\n    const rect = this.graphDiv.getBoundingClientRect();\n    layout.autosize = false; // height is from the div\n    layout.height = this.height;\n    layout.width = rect.width;\n\n    // Make sure it is something\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    if (this.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n\n      // 3d uses 'scene' for the axis names\n      layout.scene = {\n        xaxis: {title: layout.xaxis.title},\n        yaxis: {title: layout.yaxis.title},\n        zaxis: {title: layout.zaxis.title},\n      };\n      layout.margin = {\n        l: 0,\n        r: 0,\n        t: 0,\n        b: 5,\n        pad: 0,\n      };\n    } else {\n      delete layout.zaxis;\n      delete layout.scene;\n      const isDate = layout.xaxis.type === 'date';\n      layout.margin = {\n        l: layout.yaxis.title ? 50 : 35,\n        r: 5,\n        t: 0,\n        b: layout.xaxis.title ? 65 : isDate ? 40 : 30,\n        pad: 2,\n      };\n\n      // get the css rule of grafana graph axis text\n      const labelStyle = this.getCssRule('div.flot-text');\n      if (labelStyle) {\n        let color = labelStyle.style.color;\n        if (!layout.font) {\n          layout.font = {};\n        }\n        layout.font.color = color;\n\n        // make the grid a little more transparent\n        color = $.color\n          .parse(color)\n          .scale('a', 0.22)\n          .toString();\n\n        // set gridcolor (like grafana graph)\n        layout.xaxis.gridcolor = color;\n        layout.yaxis.gridcolor = color;\n      }\n    }\n    return layout;\n  }\n\n  onRender() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode() || !this.graphDiv) {\n      return;\n    }\n\n    if (!Plotly) {\n      return;\n    }\n\n    if (!this.initialized) {\n      const s = this.cfg.settings;\n\n      const options = {\n        showLink: false,\n        displaylogo: false,\n        displayModeBar: s.displayModeBar,\n        modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n      };\n\n      this.layout = this.getProcessedLayout();\n      this.layout.shapes = this.annotations;\n      Plotly.react(this.graphDiv, this.traces, this.layout, options);\n\n      this.graphDiv.on('plotly_click', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n        for (let i = 0; i < data.points.length; i++) {\n          const idx = data.points[i].pointNumber;\n          const ts = this.traces[0].ts[idx];\n          // console.log( 'CLICK!!!', ts, data );\n          const msg = data.points[i].x.toPrecision(4) + ', ' + data.points[i].y.toPrecision(4);\n          this.$rootScope.appEvent('alert-success', [\n            msg,\n            '@ ' + this.dashboard.formatDate(moment(ts)),\n          ]);\n        }\n      });\n\n      // if(true) {\n      //   this.graphDiv.on('plotly_hover', (data, xxx) => {\n      //     console.log( 'HOVER!!!', data, xxx, this.mouse );\n      //     if(data.points.length>0) {\n      //       var idx = 0;\n      //       var pt = data.points[idx];\n\n      //       var body = '<div class=\"graph-tooltip-time\">'+ pt.pointNumber +'</div>';\n      //       body += \"<center>\";\n      //       body += pt.x + ', '+pt.y;\n      //       body += \"</center>\";\n\n      //       //this.$tooltip.html( body ).place_tt( this.mouse.pageX + 10, this.mouse.pageY );\n      //     }\n      //   }).on('plotly_unhover', (data) => {\n      //     //this.$tooltip.detach();\n      //   });\n      // }\n\n      this.graphDiv.on('plotly_selected', data => {\n        if (data === undefined || data.points === undefined) {\n          return;\n        }\n\n        if (data.points.length === 0) {\n          console.log('Nothing Selected', data);\n          return;\n        }\n\n        console.log('SELECTED', data);\n\n        let min = Number.MAX_SAFE_INTEGER;\n        let max = Number.MIN_SAFE_INTEGER;\n\n        for (let i = 0; i < data.points.length; i++) {\n          const idx = data.points[i].pointNumber;\n          const ts = this.traces[0].ts[idx];\n          min = Math.min(min, ts);\n          max = Math.max(max, ts);\n        }\n\n        // At least 2 seconds\n        min -= 1000;\n        max += 1000;\n\n        const range = {from: moment.utc(min), to: moment.utc(max)};\n\n        console.log('SELECTED!!!', min, max, data.points.length, range);\n\n        this.timeSrv.setTime(range);\n\n        // rebuild the graph after query\n        if (this.graphDiv) {\n          Plotly.Plots.purge(this.graphDiv);\n          this.graphDiv.innerHTML = '';\n          this.initialized = false;\n        }\n      });\n      this.initialized = true;\n    } else if (this.initialized) {\n      Plotly.redraw(this.graphDiv);\n    } else {\n      console.log('Not initialized yet!');\n    }\n  }\n\n  onDataSnapshotLoad(snapshot) {\n    this.onDataReceived(snapshot);\n  }\n\n  onDataReceived(dataList) {\n    const finfo: SeriesWrapper[] = [];\n    let seriesHash = '/';\n    if (dataList && dataList.length > 0) {\n      const useRefID = dataList.length === this.panel.targets.length;\n      dataList.forEach((series, sidx) => {\n        let refId = '';\n        if (useRefID) {\n          refId = _.get(this.panel, 'targets[' + sidx + '].refId');\n          if (!refId) {\n            refId = String.fromCharCode('A'.charCodeAt(0) + sidx);\n          }\n        }\n        if (series.columns) {\n          for (let i = 0; i < series.columns.length; i++) {\n            finfo.push(new SeriesWrapperTable(refId, series, i));\n          }\n          finfo.push(new SeriesWrapperTableRow(refId, series));\n        } else if (series.target) {\n          finfo.push(new SeriesWrapperSeries(refId, series, 'value'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'time'));\n          finfo.push(new SeriesWrapperSeries(refId, series, 'index'));\n        } else {\n          console.error('Unsupported Series response', sidx, series);\n        }\n      });\n    }\n    this.seriesByKey.clear();\n    finfo.forEach(s => {\n      s.getAllKeys().forEach(k => {\n        this.seriesByKey.set(k, s);\n        seriesHash += '$' + k;\n      });\n    });\n    this.series = finfo;\n\n    // Now Process the loaded data\n    const hchanged = this.seriesHash !== seriesHash;\n    if (hchanged && this.editor) {\n      EditorHelper.updateMappings(this);\n      this.editor.selectTrace(this.editor.traceIndex);\n      this.editor.onConfigChanged();\n    }\n\n    if (hchanged || !this.initialized) {\n      this.onConfigChanged();\n      this.seriesHash = seriesHash;\n    }\n\n    // Support Annotations\n    if (this.is3d()) {\n      this.annotations = [];\n      this.layout.shapes = this.annotations;\n    } else {\n      this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(results => {\n          this.annotations = processAnnotations(results);\n          this.layout.shapes = this.annotations;\n        });\n    }\n\n    // Load the real data changes\n    this._updateTraceData();\n    this.render();\n  }\n\n  __addCopyPath(trace: any, key: string, path: string) {\n    if (key) {\n      trace.__set.push({\n        key: key,\n        path: path,\n      });\n      const s: SeriesWrapper = this.seriesByKey.get(key);\n      if (!s) {\n        this.dataWarnings.push('Unable to find: ' + key + ' for ' + trace.name + ' // ' + path);\n      }\n    }\n  }\n\n  // This will update all trace settings *except* the data\n  _updateTracesFromConfigs() {\n    this.dataWarnings = [];\n\n    // Make sure we have a trace\n    if (this.cfg.traces == null || this.cfg.traces.length < 1) {\n      this.cfg.traces = [_.cloneDeep(PlotlyPanelCtrl.defaultTrace)];\n    }\n\n    const is3D = this.is3d();\n    this.traces = this.cfg.traces.map((tconfig, idx) => {\n      const config = this.deepCopyWithTemplates(tconfig) || {};\n      _.defaults(config, PlotlyPanelCtrl.defaults);\n      const mapping = config.mapping;\n\n      const trace: any = {\n        name: config.name || EditorHelper.createTraceName(idx),\n        type: this.cfg.settings.type,\n        mode: 'markers+lines', // really depends on config settings\n        __set: [], // { key:? property:? }\n      };\n\n      let mode = '';\n      if (config.show.markers) {\n        mode += '+markers';\n        trace.marker = config.settings.marker;\n\n        delete trace.marker.sizemin;\n        delete trace.marker.sizemode;\n        delete trace.marker.sizeref;\n\n        if (config.settings.color_option === 'ramp') {\n          this.__addCopyPath(trace, mapping.color, 'marker.color');\n        } else {\n          delete trace.marker.colorscale;\n          delete trace.marker.showscale;\n        }\n      }\n\n      if (config.show.lines) {\n        mode += '+lines';\n        trace.line = config.settings.line;\n      }\n\n      // Set the text\n      this.__addCopyPath(trace, mapping.text, 'text');\n      this.__addCopyPath(trace, mapping.x, 'x');\n      this.__addCopyPath(trace, mapping.y, 'y');\n\n      if (is3D) {\n        this.__addCopyPath(trace, mapping.z, 'z');\n      }\n\n      // Set the trace mode\n      if (mode) {\n        trace.mode = mode.substring(1);\n      }\n      return trace;\n    });\n  }\n\n  // Fills in the required data into the trace values\n  _updateTraceData(force = false): boolean {\n    if (!this.series) {\n      // console.log('NO Series data yet!');\n      return false;\n    }\n\n    if (force || !this.traces) {\n      this._updateTracesFromConfigs();\n    } else if (this.traces.length !== this.cfg.traces.length) {\n      console.log(\n        'trace number mismatch.  Found: ' +\n          this.traces.length +\n          ', expect: ' +\n          this.cfg.traces.length\n      );\n      this._updateTracesFromConfigs();\n    }\n\n    // Use zero when the metric value is missing\n    // Plotly gets lots of errors when the values are missing\n    let zero: any = [];\n    this.traces.forEach(trace => {\n      if (trace.__set) {\n        trace.__set.forEach(v => {\n          const s = this.seriesByKey.get(v.key);\n          let vals: any[] = zero;\n          if (s) {\n            vals = s.toArray();\n            if (vals && vals.length > zero.length) {\n              zero = Array.from(Array(3), () => 0);\n            }\n          } else {\n            if (!this.error) {\n              this.error = '';\n            }\n            this.error += 'Unable to find: ' + v.key + ' (using zeros).  ';\n          }\n          if (!vals) {\n            vals = zero;\n          }\n          _.set(trace, v.path, vals);\n        });\n      }\n    });\n\n    //console.log('SetDATA', this.traces);\n    return true;\n  }\n\n  onConfigChanged() {\n    // Force reloading the traces\n    this._updateTraceData(true);\n\n    if (!Plotly) {\n      return;\n    }\n\n    // Check if the plotly library changed\n    loadIfNecessary(this.cfg).then(res => {\n      if (res) {\n        if (Plotly) {\n          Plotly.purge(this.graphDiv);\n        }\n        Plotly = res;\n      }\n\n      // Updates the layout and redraw\n      if (this.initialized && this.graphDiv) {\n        const s = this.cfg.settings;\n        const options = {\n          showLink: false,\n          displaylogo: false,\n          displayModeBar: s.displayModeBar,\n          modeBarButtonsToRemove: ['sendDataToCloud'], //, 'select2d', 'lasso2d']\n        };\n        this.layout = this.getProcessedLayout();\n        this.layout.shapes = this.annotations;\n        Plotly.react(this.graphDiv, this.traces, this.layout, options);\n      }\n\n      this.render(); // does not query again!\n    });\n  }\n\n  is3d() {\n    return this.cfg.settings.type === 'scatter3d';\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    this.graphDiv = elem.find('.plotly-spot')[0];\n    this.initialized = false;\n    elem.on('mousemove', evt => {\n      this.mouse = evt;\n    });\n\n    //let p = $(this.graphDiv).parent().parent()[0];\n    //console.log( 'PLOT', this.graphDiv, p );\n  }\n}\n\nexport {PlotlyPanelCtrl, PlotlyPanelCtrl as PanelCtrl};\n","import _ from 'lodash';\n\n// This gives a standard way to get a value for a given field\nexport abstract class SeriesWrapper {\n  refId: string; // From Query Target\n  name: string;\n\n  type?: 'string' | 'date' | 'boolean' | 'epoch' | 'number';\n  first?: any;\n  count: number;\n\n  /** @ngInject */\n  constructor(refId: string) {\n    this.refId = refId;\n  }\n\n  protected setFirst(v: any) {\n    this.first = v;\n    if (_.isNumber(v)) {\n      this.type = 'number';\n    } else if (_.isString(v)) {\n      this.type = 'string';\n    } else if (typeof v === typeof true) {\n      this.type = 'boolean';\n    }\n  }\n\n  // The best key for this field\n  getKey(): string {\n    return this.name;\n  }\n\n  // All ways to access this field\n  getAllKeys(): string[] {\n    return [this.getKey()];\n  }\n\n  abstract toArray(): Array<string | number | boolean>;\n}\n\nexport class SeriesWrapperSeries extends SeriesWrapper {\n  value: 'value' | 'index' | 'time';\n\n  /** @ngInject */\n  constructor(refId: string, public series: any, val: 'value' | 'index' | 'time') {\n    super(refId);\n    this.value = val;\n    this.count = series.datapoints.length;\n    this.name = series.target;\n\n    if ('index' === val) {\n      this.first = 0;\n      this.type = 'number';\n      this.name += '@index';\n      return;\n    }\n    if ('value' === val) {\n      _.forEach(series.datapoints, arr => {\n        if (arr[0] !== null) {\n          // 0 is an ok value so cant use if(arr[0])\n          this.setFirst(arr[0]);\n          return false;\n        }\n        return true; // continue\n      });\n      return;\n    }\n    if ('time' === val) {\n      this.type = 'epoch';\n      this.first = series.datapoints[0][1];\n      this.name += '@time';\n      return;\n    }\n  }\n\n  toArray(): any[] {\n    if ('index' === this.value) {\n      const arr = new Array(this.count);\n      for (let i = 0; i < this.count; i++) {\n        arr[i] = i;\n      }\n      return arr;\n    }\n    const idx = 'time' === this.value ? 1 : 0;\n    return _.map(this.series.datapoints, arr => {\n      return arr[idx];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      const vals = [this.name, this.refId + '@' + this.value, this.refId + '/' + this.name];\n\n      if ('A' === this.refId) {\n        vals.push('@' + this.value);\n      }\n      return vals;\n    }\n    return [this.name];\n  }\n}\n\nexport class SeriesWrapperTableRow extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any) {\n    super(refId);\n\n    this.name = refId + '@row';\n  }\n\n  toArray(): any[] {\n    const count = this.table.rows.length;\n    const arr = new Array(count);\n    for (let i = 0; i < count; i++) {\n      arr[i] = i;\n    }\n    return arr;\n  }\n}\n\nexport class SeriesWrapperTable extends SeriesWrapper {\n  /** @ngInject */\n  constructor(refId: string, public table: any, public index: number) {\n    super(refId);\n    this.count = table.rows.length;\n\n    const col = table.columns[index];\n    if (!col) {\n      throw new Error('Unkonwn Column: ' + index);\n    }\n\n    this.name = col.text;\n    if ('time' === col.type) {\n      this.type = 'epoch';\n      this.first = table.rows[0][index];\n    } else {\n      for (let i = 0; i < this.count; i++) {\n        const v = table.rows[i][index];\n        if (v !== null) {\n          // 0 is an ok value so cant use if(v)\n          this.setFirst(v);\n          return;\n        }\n      }\n    }\n  }\n\n  toArray(): any[] {\n    return _.map(this.table.rows, row => {\n      return row[this.index];\n    });\n  }\n\n  getAllKeys(): string[] {\n    if (this.refId) {\n      return [this.getKey(), this.refId + '/' + this.name, this.refId + '[' + this.index + ']'];\n    }\n    return [this.getKey()];\n  }\n}\n","import _ from 'lodash';\n\nimport {PlotlyPanelCtrl} from './module';\n\nclass AxisInfo {\n  label: string;\n  layout: any; // The config saved in layout\n  property: string; // mapping property to check in a trace\n  segment: any; // The Grafana <metric-segment\n}\n\nconst REMOVE_KEY = '-- remove --';\n\nexport class EditorHelper {\n  axis = new Array<AxisInfo>();\n  trace: any; // Trace Config\n  traceIndex = 0;\n  traces: any[]; // array of configs;\n\n  symbol: any; // The Grafana <metric-segment for this symbol\n  mapping: any = {}; // The Grafana <metric-segment for this symbol\n\n  /** @ngInject */\n  constructor(public ctrl: PlotlyPanelCtrl) {\n    EditorHelper.updateMappings(ctrl);\n    this.selectTrace(0);\n  }\n\n  // Callback when the query results changed\n  static updateMappings(ctrl: PlotlyPanelCtrl): boolean {\n    if (ctrl.series == null || ctrl.series.length < 1) {\n      return false;\n    }\n\n    const defaultMappings = {\n      first: ctrl.series[0].getKey(),\n      time: ctrl.series[1].getKey(),\n    };\n\n    let changed = false;\n    ctrl.cfg.traces.forEach(trace => {\n      _.defaults(trace, PlotlyPanelCtrl.defaultTrace);\n      const mapping = trace.mapping;\n      if (!mapping.color) {\n        mapping.color = defaultMappings.first;\n        changed = true;\n      }\n      if (!mapping.x) {\n        mapping.x = defaultMappings.time;\n        changed = true;\n      }\n      if (!mapping.y) {\n        mapping.y = defaultMappings.first;\n        changed = true;\n      }\n      if (ctrl.is3d() && !mapping.z) {\n        mapping.z = defaultMappings.first;\n        changed = true;\n      }\n    });\n    return changed;\n  }\n\n  onConfigChanged() {\n    this.onUpdateAxis(); // Every time????\n\n    // Initalize the axis\n    for (let i = 0; i < this.axis.length; i++) {\n      if (this.axis[i].layout.rangemode === 'between') {\n        if (!_.isArray(this.axis[i].layout.range)) {\n          this.axis[i].layout.range = [0, null];\n        }\n      } else {\n        delete this.axis[i].layout.range;\n      }\n    }\n\n    this.ctrl.onConfigChanged();\n  }\n\n  onUpdateAxis() {\n    const mapping = this.trace.mapping;\n    if (!mapping) {\n      console.error('Missing mappings for trace', this.trace);\n      return;\n    }\n\n    const layout = this.ctrl.cfg.layout;\n    if (!layout.xaxis) {\n      layout.xaxis = {};\n    }\n    if (!layout.yaxis) {\n      layout.yaxis = {};\n    }\n\n    this.axis = [];\n    this.axis.push({\n      label: 'X Axis',\n      layout: layout.xaxis,\n      property: 'x',\n      segment: this.mapping.x,\n    });\n    this.axis.push({\n      label: 'Y Axis',\n      layout: layout.yaxis,\n      property: 'y',\n      segment: this.mapping.y,\n    });\n\n    if (this.ctrl.is3d()) {\n      if (!layout.zaxis) {\n        layout.zaxis = {};\n      }\n      this.axis.push({\n        label: 'Z Axis',\n        layout: layout.zaxis,\n        property: 'z',\n        segment: this.mapping.z,\n      });\n    }\n  }\n\n  //-----------------------------------------------------------------------\n  // Manage Traces\n  //-----------------------------------------------------------------------\n\n  selectTrace(index: number) {\n    this.traces = this.ctrl.cfg.traces;\n    if (!this.traces || this.traces.length < 1) {\n      this.traces = this.ctrl.cfg.traces = [_.deepClone(PlotlyPanelCtrl.defaultTrace)];\n    }\n    if (index >= this.ctrl.cfg.traces.length) {\n      index = this.ctrl.cfg.traces.length - 1;\n    }\n    this.trace = this.ctrl.cfg.traces[index];\n    this.traceIndex = index;\n\n    _.defaults(this.trace, PlotlyPanelCtrl.defaultTrace);\n    if (!this.trace.name) {\n      this.trace.name = EditorHelper.createTraceName(index);\n    }\n\n    // The _defaults makes sure this is taken care of\n    this.symbol = this.ctrl.uiSegmentSrv.newSegment({\n      value: this.trace.settings.marker.symbol,\n    });\n\n    // Now set one for each key\n    this.mapping = {};\n    _.forEach(this.trace.mapping, (value, key) => {\n      this.updateSegMapping(value, key);\n    });\n\n    console.log('Editor Info', this);\n\n    this.onConfigChanged();\n    this.ctrl.refresh();\n  }\n\n  private updateSegMapping(value, key, updateTrace = false) {\n    if (REMOVE_KEY === value) {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n      value = null; // will set this value later\n    } else if (value) {\n      const s = this.ctrl.seriesByKey.get(value);\n      const opts: any = {\n        value: value,\n        series: s,\n      };\n      if (!s) {\n        //  opts.fake = true;\n        opts.html = value + '  <i class=\"fa fa-exclamation-triangle\"></i>';\n      }\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment(opts);\n    } else {\n      this.mapping[key] = this.ctrl.uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n      });\n    }\n\n    if (updateTrace) {\n      this.trace.mapping[key] = value;\n      console.log('SET', key, value, this.trace.mapping);\n    }\n  }\n\n  createTrace() {\n    let trace: any = {};\n    if (this.ctrl.cfg.traces.length > 0) {\n      trace = _.cloneDeep(this.ctrl.cfg.traces[this.ctrl.cfg.traces.length - 1]);\n    } else {\n      trace = _.deepClone(PlotlyPanelCtrl.defaultTrace);\n    }\n    trace.name = EditorHelper.createTraceName(this.ctrl.traces.length);\n    this.ctrl.cfg.traces.push(trace);\n    this.selectTrace(this.ctrl.cfg.traces.length - 1);\n  }\n\n  removeCurrentTrace() {\n    // TODO... better behavior\n    if (this.traces.length <= 1) {\n      console.error('Wont remove a single trace', this);\n      return;\n    }\n\n    for (let i = 0; i < this.traces.length; i++) {\n      if (this.trace === this.traces[i]) {\n        this.traces.splice(i, 1);\n        if (i >= this.traces.length) {\n          i = this.traces.length - 1;\n        }\n        this.ctrl.onConfigChanged();\n        this.ctrl._updateTraceData(true);\n        this.selectTrace(i);\n        this.ctrl.refresh();\n        return;\n      }\n    }\n\n    console.error('Could not find', this);\n  }\n\n  static createTraceName(idx: number) {\n    return 'Trace ' + (idx + 1);\n  }\n\n  //-----------------------------------------------------------------------\n  // SERIES\n  //-----------------------------------------------------------------------\n\n  getSeriesSegs(withRemove = false): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const series: any[] = [];\n\n      if (withRemove) {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            fake: true,\n            value: REMOVE_KEY,\n            series: null,\n          })\n        );\n      }\n      this.ctrl.series.forEach(s => {\n        series.push(\n          this.ctrl.uiSegmentSrv.newSegment({\n            value: s.name,\n            series: s,\n          })\n        );\n      });\n\n      //console.log('GET Segments:', withRemove, series);\n      //console.log('ALL Series:', this.ctrl.series);\n      resolve(series);\n    });\n  }\n\n  onAxisSeriesChanged(axis: AxisInfo) {\n    this.updateSegMapping(axis.segment.value, axis.property, true);\n    this.onConfigChanged();\n  }\n\n  getTextSegments(): any[] {\n    return [this.mapping.text];\n  }\n\n  onTextMetricChanged(sss: any) {\n    const seg = this.mapping.text;\n    this.updateSegMapping(seg.value, 'text', true);\n    this.onConfigChanged();\n  }\n\n  getColorSegments(): any[] {\n    if (this.trace.settings.color_option === 'ramp') {\n      return [this.mapping.color];\n    }\n    return [];\n  }\n\n  onColorChanged() {\n    const seg = this.mapping.color;\n    this.updateSegMapping(seg.value, 'color', true);\n    this.onConfigChanged();\n  }\n\n  //-----------------------------------------------------------------------\n  // SYMBOLS\n  //-----------------------------------------------------------------------\n\n  onSymbolChanged() {\n    this.trace.settings.marker.symbol = this.symbol.value;\n    this.onConfigChanged();\n  }\n\n  getSymbolSegs(): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      const txt = [\n        'circle',\n        'circle-open',\n        'circle-dot',\n        'circle-open-dot',\n        'square',\n        'square-open',\n        'square-dot',\n        'square-open-dot',\n        'diamond',\n        'diamond-open',\n        'diamond-dot',\n        'diamond-open-dot',\n        'cross',\n        'cross-open',\n        'cross-dot',\n        'cross-open-dot',\n        'x',\n        'x-open',\n        'x-dot',\n        'x-open-dot',\n        'triangle-up',\n        'triangle-up-open',\n        'triangle-up-dot',\n        'triangle-up-open-dot',\n        'triangle-down',\n        'triangle-down-open',\n        'triangle-down-dot',\n        'triangle-down-open-dot',\n        'triangle-left',\n        'triangle-left-open',\n        'triangle-left-dot',\n        'triangle-left-open-dot',\n        'triangle-right',\n        'triangle-right-open',\n        'triangle-right-dot',\n        'triangle-right-open-dot',\n        'triangle-ne',\n        'triangle-ne-open',\n        'triangle-ne-dot',\n        'triangle-ne-open-dot',\n        'triangle-se',\n        'triangle-se-open',\n        'triangle-se-dot',\n        'triangle-se-open-dot',\n        'triangle-sw',\n        'triangle-sw-open',\n        'triangle-sw-dot',\n        'triangle-sw-open-dot',\n        'triangle-nw',\n        'triangle-nw-open',\n        'triangle-nw-dot',\n        'triangle-nw-open-dot',\n        'pentagon',\n        'pentagon-open',\n        'pentagon-dot',\n        'pentagon-open-dot',\n        'hexagon',\n        'hexagon-open',\n        'hexagon-dot',\n        'hexagon-open-dot',\n        'hexagon2',\n        'hexagon2-open',\n        'hexagon2-dot',\n        'hexagon2-open-dot',\n        'octagon',\n        'octagon-open',\n        'octagon-dot',\n        'octagon-open-dot',\n        'star',\n        'star-open',\n        'star-dot',\n        'star-open-dot',\n        'hexagram',\n        'hexagram-open',\n        'hexagram-dot',\n        'hexagram-open-dot',\n        'star-triangle-up',\n        'star-triangle-up-open',\n        'star-triangle-up-dot',\n        'star-triangle-up-open-dot',\n        'star-triangle-down',\n        'star-triangle-down-open',\n        'star-triangle-down-dot',\n        'star-triangle-down-open-dot',\n        'star-square',\n        'star-square-open',\n        'star-square-dot',\n        'star-square-open-dot',\n        'star-diamond',\n        'star-diamond-open',\n        'star-diamond-dot',\n        'star-diamond-open-dot',\n        'diamond-tall',\n        'diamond-tall-open',\n        'diamond-tall-dot',\n        'diamond-tall-open-dot',\n        'diamond-wide',\n        'diamond-wide-open',\n        'diamond-wide-dot',\n        'diamond-wide-open-dot',\n        'hourglass',\n        'hourglass-open',\n        'bowtie',\n        'bowtie-open',\n        'circle-cross',\n        'circle-cross-open',\n        'circle-x',\n        'circle-x-open',\n        'square-cross',\n        'square-cross-open',\n        'square-x',\n        'square-x-open',\n        'diamond-cross',\n        'diamond-cross-open',\n        'diamond-x',\n        'diamond-x-open',\n        'cross-thin',\n        'cross-thin-open',\n        'x-thin',\n        'x-thin-open',\n        'asterisk',\n        'asterisk-open',\n        'hash',\n        'hash-open',\n        'hash-dot',\n        'hash-open-dot',\n        'y-up',\n        'y-up-open',\n        'y-down',\n        'y-down-open',\n        'y-left',\n        'y-left-open',\n        'y-right',\n        'y-right-open',\n        'line-ew',\n        'line-ew-open',\n        'line-ns',\n        'line-ns-open',\n        'line-ne',\n        'line-ne-open',\n        'line-nw',\n        'line-nw-open',\n      ];\n\n      const segs: any[] = [];\n      _.forEach(txt, val => {\n        segs.push(this.ctrl.uiSegmentSrv.newSegment(val));\n      });\n      resolve(segs);\n    });\n  }\n}\n","import $script from 'scriptjs';\n\nlet loaded: any; // Plotly Library\nlet isFull = false;\nlet wasCDN = false;\n\nexport function loadPlotly(cfg: any): Promise<any> {\n  if (loaded) {\n    console.log('using already loaded value');\n    return Promise.resolve(loaded);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  let url = 'public/plugins/natel-plotly-panel/lib/plotly-cartesian.min.js';\n  if (cfg.loadFromCDN) {\n    url = needsFull\n      ? 'https://cdn.plot.ly/plotly-latest.min.js'\n      : 'https://cdn.plot.ly/plotly-cartesian-latest.min.js';\n  } else if (needsFull) {\n    url = 'public/plugins/natel-plotly-panel/lib/plotly.min.js';\n  }\n  return new Promise((resolve, reject) => {\n    $script(url, resolve);\n  }).then(res => {\n    isFull = needsFull;\n    wasCDN = cfg.loadFromCDN;\n    loaded = window['Plotly'];\n    return loaded;\n  });\n}\n\nexport function loadIfNecessary(cfg: any): Promise<any> {\n  if (!loaded) {\n    return loadPlotly(cfg);\n  }\n\n  if (wasCDN !== cfg.loadFromCDN) {\n    console.log('Use CDN', cfg.loadFromCDN);\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  const needsFull = cfg.settings.type !== 'scatter';\n  if (needsFull && !isFull) {\n    console.log('Switching to the full plotly library');\n    loaded = null;\n    return loadPlotly(cfg);\n  }\n\n  // No changes\n  return Promise.resolve(null);\n}\n","/*!\n  * $script.js JS loader & dependency manager\n  * https://github.com/ded/script.js\n  * (c) Dustin Diaz 2014 | License MIT\n  */\n\n(function (name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else this[name] = definition()\n})('$script', function () {\n  var doc = document\n    , head = doc.getElementsByTagName('head')[0]\n    , s = 'string'\n    , f = false\n    , push = 'push'\n    , readyState = 'readyState'\n    , onreadystatechange = 'onreadystatechange'\n    , list = {}\n    , ids = {}\n    , delay = {}\n    , scripts = {}\n    , scriptpath\n    , urlArgs\n\n  function every(ar, fn) {\n    for (var i = 0, j = ar.length; i < j; ++i) if (!fn(ar[i])) return f\n    return 1\n  }\n  function each(ar, fn) {\n    every(ar, function (el) {\n      fn(el)\n      return 1\n    })\n  }\n\n  function $script(paths, idOrDone, optDone) {\n    paths = paths[push] ? paths : [paths]\n    var idOrDoneIsDone = idOrDone && idOrDone.call\n      , done = idOrDoneIsDone ? idOrDone : optDone\n      , id = idOrDoneIsDone ? paths.join('') : idOrDone\n      , queue = paths.length\n    function loopFn(item) {\n      return item.call ? item() : list[item]\n    }\n    function callback() {\n      if (!--queue) {\n        list[id] = 1\n        done && done()\n        for (var dset in delay) {\n          every(dset.split('|'), loopFn) && !each(delay[dset], loopFn) && (delay[dset] = [])\n        }\n      }\n    }\n    setTimeout(function () {\n      each(paths, function loading(path, force) {\n        if (path === null) return callback()\n        \n        if (!force && !/^https?:\\/\\//.test(path) && scriptpath) {\n          path = (path.indexOf('.js') === -1) ? scriptpath + path + '.js' : scriptpath + path;\n        }\n        \n        if (scripts[path]) {\n          if (id) ids[id] = 1\n          return (scripts[path] == 2) ? callback() : setTimeout(function () { loading(path, true) }, 0)\n        }\n\n        scripts[path] = 1\n        if (id) ids[id] = 1\n        create(path, callback)\n      })\n    }, 0)\n    return $script\n  }\n\n  function create(path, fn) {\n    var el = doc.createElement('script'), loaded\n    el.onload = el.onerror = el[onreadystatechange] = function () {\n      if ((el[readyState] && !(/^c|loade/.test(el[readyState]))) || loaded) return;\n      el.onload = el[onreadystatechange] = null\n      loaded = 1\n      scripts[path] = 2\n      fn()\n    }\n    el.async = 1\n    el.src = urlArgs ? path + (path.indexOf('?') === -1 ? '?' : '&') + urlArgs : path;\n    head.insertBefore(el, head.lastChild)\n  }\n\n  $script.get = create\n\n  $script.order = function (scripts, id, done) {\n    (function callback(s) {\n      s = scripts.shift()\n      !scripts.length ? $script(s, id, done) : $script(s, callback)\n    }())\n  }\n\n  $script.path = function (p) {\n    scriptpath = p\n  }\n  $script.urlArgs = function (str) {\n    urlArgs = str;\n  }\n  $script.ready = function (deps, ready, req) {\n    deps = deps[push] ? deps : [deps]\n    var missing = [];\n    !each(deps, function (dep) {\n      list[dep] || missing[push](dep);\n    }) && every(deps, function (dep) {return list[dep]}) ?\n      ready() : !function (key) {\n      delay[key] = delay[key] || []\n      delay[key][push](ready)\n      req && req(missing)\n    }(deps.join('|'))\n    return $script\n  }\n\n  $script.done = function (idOrDone) {\n    $script([null], idOrDone)\n  }\n\n  return $script\n});\n","import {Shape} from 'plotly.js';\n\nexport function processAnnotations(results: any): Shape[] {\n  return results.annotations.map(a => {\n    return {\n      type: 'line', // rect\n      xref: 'x',\n      yref: 'paper',\n      x0: a.time,\n      y0: 0,\n      x1: a.time,\n      y1: 1,\n\n      visible: true,\n      layer: 'above',\n\n      fillcolor: a.annotation.iconColor,\n      opacity: 0.8,\n      line: {\n        color: a.annotation.iconColor,\n        width: 2,\n        dash: 'dash',\n      },\n    } as Shape;\n  });\n}\n"],"sourceRoot":""}